"use strict";
exports.__esModule = true;
var react_1 = require("react");
var useVoiceToText = function (_a) {
    var _b = _a === void 0 ? { lang: 'en-US', continuous: true } : _a, lang = _b.lang, continuous = _b.continuous;
    var _c = (0, react_1.useState)(''), transcript = _c[0], setTranscript = _c[1];
    var isContinuous = (0, react_1.useRef)(continuous !== null && continuous !== void 0 ? continuous : true);
    var SpeechRecognition = (0, react_1.useMemo)(function () {
        if (typeof window === 'undefined') {
            return null;
        }
        return window.SpeechRecognition || window.webkitSpeechRecognition;
    }, []);
    var recognition = (0, react_1.useMemo)(function () {
        if (SpeechRecognition)
            return new SpeechRecognition();
        else
            return null;
    }, [SpeechRecognition]);
    (0, react_1.useEffect)(function () {
        if (lang && recognition) {
            recognition.lang = lang;
        }
    }, [lang, recognition]);
    function startListening() {
        if (!recognition)
            return;
        recognition.start();
        if (continuous) {
            isContinuous.current = true;
        }
    }
    function stopListening() {
        if (!recognition)
            return;
        recognition.stop();
        isContinuous.current = false;
    }
    function reset() {
        setTranscript('');
    }
    if (recognition) {
        recognition.onend = function () {
            if (isContinuous.current) {
                // if the listening is continuous, it starts listening even the speaker is quiet till it will be stopped manually
                startListening();
            }
        };
        recognition.onerror = function (event) {
            console.error("Speech recognition error detected: ".concat(event.error));
        };
        recognition.onresult = function (event) {
            setTranscript(function (prevTranscript) { return prevTranscript + ' ' + event.results[0][0].transcript; });
        };
    }
    return { startListening: startListening, stopListening: stopListening, transcript: transcript, reset: reset };
};
exports["default"] = useVoiceToText;
